import telebot
from telebot import types
import random
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
words = [
    {"word": "apple", "translation": "—è–±–ª–æ–∫–æ", "transcription": "[Àà√¶p…ôl]"},
    {"word": "book", "translation": "–∫–Ω–∏–≥–∞", "transcription": "[b äk]"},
    {"word": "cat", "translation": "–∫–æ—Ç", "transcription": "[k√¶t]"},
    {"word": "dog", "translation": "—Å–æ–±–∞–∫–∞", "transcription": "[d…í…°]"},
    {"word": "elephant", "translation": "—Å–ª–æ–Ω", "transcription": "[Àà…õl…™f…ônt]"},
    {"word": "flower", "translation": "—Ü–≤–µ—Ç–æ–∫", "transcription": "[Ààfla ä…ôr]"},
    {"word": "guitar", "translation": "–≥–∏—Ç–∞—Ä–∞", "transcription": "[…°…™Ààt…ëÀêr]"},
    {"word": "house", "translation": "–¥–æ–º", "transcription": "[ha äs]"},
    {"word": "island", "translation": "–æ—Å—Ç—Ä–æ–≤", "transcription": "[Ààa…™l…ônd]"},
    {"word": "jungle", "translation": "–¥–∂—É–Ω–≥–ª–∏", "transcription": "[Ààd í å≈ã…°…ôl]"}
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
def determine_level(correct_answers, total_questions):
    percentage = (correct_answers / total_questions) * 100

    if percentage >= 80:
        return "B1-B2-–°1"
    elif percentage >= 60:
        return "A2"
    elif percentage >= 40:
        return "A1"
    else:
        return "A0"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("üöÄ–°—Ç–∞—Ä—Ç")
    action_button = types.KeyboardButton("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç‚õ∞Ô∏è")
    markup.add(start_button, action_button)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è, {message.from_user.first_name} \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=["text"])
def buttons(message):
    if message.text == "üöÄ–°—Ç–∞—Ä—Ç":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø—É–Ω–∫—Ç–æ–≤
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        level_button = types.KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—èüíØ")
        words_button = types.KeyboardButton("–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞üìó")
        rules_button = types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞üí¨")
        markup.add(level_button, words_button, rules_button)
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç!", reply_markup=markup)

    elif message.text == "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç‚õ∞Ô∏è":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        compliments = [
            "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
            "–¢—ã —É–º–Ω–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å!",
            "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ!",
            "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π!",
            "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å!"
        ]
        bot.send_message(message.chat.id, text=f"{random.choice(compliments)}")

    elif message.text == "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—èüíØ":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_test_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å –¢–µ—Å—Çüôã")
        back_button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üÜò")
        markup.add(start_test_button, back_button)
        bot.send_message(message.chat.id, "–ù–∞—á–Ω–µ–º —Ç–µ—Å—Ç! –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω!", reply_markup=markup)

    elif message.text == "–ù–∞—á–∞—Ç—å –¢–µ—Å—Çüôã":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
        user_data[message.chat.id] = {
            "current_question": 0,
            "correct_answers": 0,
            "questions": [
                {"sentence": "She ___ to school every day.", "answer": "goes"},
                {"sentence": "They ___ football right now.", "answer": "are playing"},
                {"sentence": "He ___ his homework yesterday.", "answer": "did"},
                {"sentence": "I ___ call you tomorrow.", "answer": "will"},
                {"sentence": "We ___ already finished the project.", "answer": "have"},
                {"sentence": "She is ___ best student in the class.", "answer": "the"},
                {"sentence": "The book is ___ the table.", "answer": "on"},
                {"sentence": "This is the ___ movie I have ever seen.", "answer": "best"},
                {"sentence": "You ___ wear a helmet while riding a bike.", "answer": "must"},
                {"sentence": "There are three ___ in the room.", "answer": "chairs"}
            ]
        }
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        question = user_data[message.chat.id]["questions"][0]
        bot.send_message(message.chat.id, question["sentence"])

    elif message.text == "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞üìó":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        if message.chat.id not in user_data:
            user_data[message.chat.id] = {
                "learned_words": []
            }

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–∑—É—á–µ–Ω—ã
        learned_words = user_data[message.chat.id]["learned_words"]
        available_words = [word for word in words if word not in learned_words]

        if len(available_words) == 0:
            bot.send_message(message.chat.id, "–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞. –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è!")
            return

        # –ü–æ–ª—É—á–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
        new_words = random.sample(available_words, min(5, len(available_words)))
        user_data[message.chat.id]["learned_words"].extend(new_words)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
        response = "–í–æ—Ç –≤–∞—à–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞:\n"
        for word in new_words:
            response += f"–°–ª–æ–≤–æ: {word['word']}, –ü–µ—Ä–µ–≤–æ–¥: {word['translation']}, –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {word['transcription']}\n"
        bot.send_message(message.chat.id, response)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üÜò":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("üöÄ–°—Ç–∞—Ä—Ç")
        action_button = types.KeyboardButton("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç‚õ∞Ô∏è")
        markup.add(start_button, action_button)
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=markup)

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        if message.chat.id in user_data and "questions" in user_data[message.chat.id]:
            current_question = user_data[message.chat.id]["current_question"]
            questions = user_data[message.chat.id]["questions"]
            correct_answer = questions[current_question]["answer"]

            if message.text.strip().lower() == correct_answer.lower():
                user_data[message.chat.id]["correct_answers"] += 1
                bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")
            else:
                bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            user_data[message.chat.id]["current_question"] += 1

            if user_data[message.chat.id]["current_question"] < len(questions):
                next_question = questions[user_data[message.chat.id]["current_question"]]
                bot.send_message(message.chat.id, next_question["sentence"])
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                correct_answers = user_data[message.chat.id]["correct_answers"]
                total_questions = len(questions)
                level = determine_level(correct_answers, total_questions)
                bot.send_message(message.chat.id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                start_button = types.KeyboardButton("üöÄ–°—Ç–∞—Ä—Ç")
                action_button = types.KeyboardButton("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç‚õ∞Ô∏è")
                markup.add(start_button, action_button)
                bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=markup)

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_data[message.chat.id]
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫!")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)